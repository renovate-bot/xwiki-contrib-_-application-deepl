<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="DeepL.Code.DeepLTranslationService" locale="">
  <web>DeepL.Code</web>
  <name>DeepLTranslationService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import org.apache.commons.lang3.StringUtils;
import groovy.json.JsonSlurper;
import groovy.json.JsonOutput;
import java.net.URLEncoder;

def jsonResponse(payload) {
  def json = new JsonOutput().toJson(payload);
  response.setContentType('application/json');
  response.setCharacterEncoding('utf-8');
  response.writer.write(json);
  response.setContentLength(json.getBytes('utf-8').size());
  response.flushBuffer();
  xcontext.setFinished(true);
}

if (services.csrf.isTokenValid(request.form_token) &amp;&amp; StringUtils.isNotBlank(request.content) &amp;&amp; StringUtils.isNotBlank(request.target_locale)) {
  def logger = services.logging.getLogger(doc.fullName);
  def error = '';
  services.logging.setLevel(doc.fullName, org.xwiki.logging.LogLevel.INFO);

  try {
    def xwikiPropertiesConfiguration = services.component.getContextComponentManager().getInstance(org.xwiki.configuration.ConfigurationSource.class, 'xwikiproperties');

    // Load the API key and the base URL
    def apiKey = xwikiPropertiesConfiguration.getProperty('deepl.api.key', StringUtils.EMPTY);
    def encodedApiKey = URLEncoder.encode(apiKey, 'UTF-8');
    def apiDomain = xwikiPropertiesConfiguration.getProperty('deepl.api.domain', StringUtils.EMPTY);

    if (StringUtils.isNotBlank(apiKey) &amp;&amp; StringUtils.isNotBlank(apiDomain)) {
      def translationURL = apiDomain + '/v2/translate';

      def contentFormString = "auth_key=" + encodedApiKey + "&amp;text=" + URLEncoder.encode(request.content, 'UTF-8') + "&amp;target_lang=" + URLEncoder.encode(request.target_locale) + "&amp;tag_handling=xml";
      def contentTranslationConnection = translationURL.toURL().openConnection();
      contentTranslationConnection.setRequestMethod('POST');
      contentTranslationConnection.setDoOutput(true);
      contentTranslationConnection.setRequestProperty('Content-Type', 'application/x-www-form-urlencoded');
      contentTranslationConnection.getOutputStream().write(contentFormString.getBytes("UTF-8"));

      if (contentTranslationConnection.getResponseCode() == 200) {
        def contentTranslationResponse = contentTranslationConnection.getInputStream().getText();
        def contentTranslationJSONResponse = new JsonSlurper().parseText(contentTranslationResponse);
        logger.info('Got content result [{}]', contentTranslationJSONResponse);
        jsonResponse([success: 1, content: contentTranslationJSONResponse['translations'][0]['text']]);
      } else if (contentTranslationConnection.getResponseCode() != 456) {
        error = services.localization.render('deeplTranslation.service.api.quotaExceeded');
        logger.error(error);
        jsonResponse([success: 0, message: error]);
      } else {
        error = services.localization.render('deeplTranslation.service.api.invalidResponse');
        logger.error(error);
        jsonResponse([success: 0, message: error]);
      }
    } else {
      error = services.localization.render('deeplTranslation.service.api.missingConfiguration');
      logger.error(error);
      jsonResponse([success: 0, message: error]);
    }
  } catch (Exception e) {
    logger.error('Unhandled exception', e)
  }
} else {
  jsonResponse([success: 0, message: services.localization.render('deeplTranslation.service.insufficientParameters')]);
}
{{/groovy}}</content>
</xwikidoc>
